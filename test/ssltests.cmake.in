execute_process(COMMAND @CMAKE_COMMAND@ -E copy @CMAKE_SOURCE_DIR@/openssl/apps/server.pem ../apps
                WORKING_DIRECTORY @CMAKE_CURRENT_BINARY_DIR@
                COMMAND_ERROR_IS_FATAL ANY
)
execute_process(COMMAND @CMAKE_COMMAND@ -E copy @CMAKE_SOURCE_DIR@/openssl/apps/server2.pem ../apps
                WORKING_DIRECTORY @CMAKE_CURRENT_BINARY_DIR@
                COMMAND_ERROR_IS_FATAL ANY
)
execute_process(COMMAND @CMAKE_COMMAND@ -E copy @CMAKE_SOURCE_DIR@/openssl/test/serverinfo.pem .
                WORKING_DIRECTORY @CMAKE_CURRENT_BINARY_DIR@
                COMMAND_ERROR_IS_FATAL ANY
)

function(testssl)
    set(key "../apps/server.pem")
    set(cert "../apps/server.pem")

    if (ARGC GREATER_EQUAL 1)
        set(key ${ARGV0})
    endif()
    if (ARGC GREATER_EQUAL 2)
        set(cert ${ARGV1})
    endif()
    set(ssltest "@CMAKE_BINARY_DIR@/apps/ssltest" "-key" "${key}" "-cert" "${cert}" "-c_key" "${key}" "-c_cert" "${cert}")

    set(dsa_cert NO)
    execute_process(COMMAND @CMAKE_BINARY_DIR@/apps/openssl x509 -in ${cert} -text -noout
                    WORKING_DIRECTORY @CMAKE_CURRENT_BINARY_DIR@
                    RESULT_VARIABLE X509RESULT
                    OUTPUT_VARIABLE X509OUTPUT
    )
    if (X509RESULT EQUAL 0)
        string(FIND ${X509OUTPUT} "DSA Public Key" X509POS)
        if (NOT X509POS EQUAL -1)
            set(dsa_cert YES)
        endif()
    endif()

    set(CA "-CApath" "../certs")
    set(extra)
    if (ARGC GREATER_EQUAL 3)
        set(CA "-CAfile" "${ARGV2}")
    endif()
    if (ARGC GREATER_EQUAL 4)
        set(extra "${ARGV3}")
    endif()

    set(serverinfo "./serverinfo.pem")

    message(NOTICE "test sslv2")
    execute_process(COMMAND ${ssltest} -ssl2 ${extra}
                    WORKING_DIRECTORY @CMAKE_CURRENT_BINARY_DIR@
                    COMMAND_ERROR_IS_FATAL ANY
    )

    message(NOTICE "test sslv2 with server authentication")
    execute_process(COMMAND ${ssltest} -ssl2 -server_auth ${CA} ${extra}
                    WORKING_DIRECTORY @CMAKE_CURRENT_BINARY_DIR@
                    COMMAND_ERROR_IS_FATAL ANY
    )

    if (NOT dsa_cert)
        message(NOTICE "test sslv2 with client authentication")
        execute_process(COMMAND ${ssltest} -ssl2 -client_auth ${CA} ${extra}
                        WORKING_DIRECTORY @CMAKE_CURRENT_BINARY_DIR@
                        COMMAND_ERROR_IS_FATAL ANY
        )

        message(NOTICE "test sslv2 with both client and server authentication")
        execute_process(COMMAND ${ssltest} -ssl2 -server_auth -client_auth ${CA} ${extra}
                        WORKING_DIRECTORY @CMAKE_CURRENT_BINARY_DIR@
                        COMMAND_ERROR_IS_FATAL ANY
        )
    endif()

    message(NOTICE "test sslv3")
    execute_process(COMMAND ${ssltest} -ssl3 ${extra}
                    WORKING_DIRECTORY @CMAKE_CURRENT_BINARY_DIR@
                    COMMAND_ERROR_IS_FATAL ANY
    )

    message(NOTICE "test sslv3 with server authentication")
    execute_process(COMMAND ${ssltest} -ssl3 -server_auth ${CA} ${extra}
                    WORKING_DIRECTORY @CMAKE_CURRENT_BINARY_DIR@
                    COMMAND_ERROR_IS_FATAL ANY
    )

    message(NOTICE "test sslv3 with client authentication")
    execute_process(COMMAND ${ssltest} -ssl3 -client_auth ${CA} ${extra}
                    WORKING_DIRECTORY @CMAKE_CURRENT_BINARY_DIR@
                    COMMAND_ERROR_IS_FATAL ANY
    )

    message(NOTICE "test sslv3 with both client and server authentication")
    execute_process(COMMAND ${ssltest} -ssl3 -server_auth -client_auth ${CA} ${extra}
                    WORKING_DIRECTORY @CMAKE_CURRENT_BINARY_DIR@
                    COMMAND_ERROR_IS_FATAL ANY
    )

    message(NOTICE "test sslv2/sslv3")
    execute_process(COMMAND ${ssltest} ${extra}
                    WORKING_DIRECTORY @CMAKE_CURRENT_BINARY_DIR@
                    COMMAND_ERROR_IS_FATAL ANY
    )

    message(NOTICE "test sslv2/sslv3 with server authentication")
    execute_process(COMMAND ${ssltest} -server_auth ${CA} ${extra}
                    WORKING_DIRECTORY @CMAKE_CURRENT_BINARY_DIR@
                    COMMAND_ERROR_IS_FATAL ANY
    )

    message(NOTICE "test sslv2/sslv3 with client authentication")
    execute_process(COMMAND ${ssltest} -client_auth ${CA} ${extra}
                    WORKING_DIRECTORY @CMAKE_CURRENT_BINARY_DIR@
                    COMMAND_ERROR_IS_FATAL ANY
    )

    message(NOTICE "test sslv2/sslv3 with both client and server authentication")
    execute_process(COMMAND ${ssltest} -server_auth -client_auth ${CA} ${extra}
                    WORKING_DIRECTORY @CMAKE_CURRENT_BINARY_DIR@
                    COMMAND_ERROR_IS_FATAL ANY
    )

    message(NOTICE "test sslv2 via BIO pair")
    execute_process(COMMAND ${ssltest} -bio_pair -ssl2 ${extra}
                    WORKING_DIRECTORY @CMAKE_CURRENT_BINARY_DIR@
                    COMMAND_ERROR_IS_FATAL ANY
    )

    message(NOTICE "test sslv2 with server authentication via BIO pair")
    execute_process(COMMAND ${ssltest} -bio_pair -ssl2 -server_auth ${CA} ${extra}
                    WORKING_DIRECTORY @CMAKE_CURRENT_BINARY_DIR@
                    COMMAND_ERROR_IS_FATAL ANY
    )

    if (NOT dsa_cert)
        message(NOTICE "test sslv2 with client authentication via BIO pair")
        execute_process(COMMAND ${ssltest} -bio_pair -ssl2 -client_auth ${CA} ${extra}
                        WORKING_DIRECTORY @CMAKE_CURRENT_BINARY_DIR@
                        COMMAND_ERROR_IS_FATAL ANY
        )

        message(NOTICE "test sslv2 with both client and server authentication via BIO pair")
        execute_process(COMMAND ${ssltest} -bio_pair -ssl2 -server_auth -client_auth ${CA} ${extra}
                        WORKING_DIRECTORY @CMAKE_CURRENT_BINARY_DIR@
                        COMMAND_ERROR_IS_FATAL ANY
        )
    endif()

    message(NOTICE "test sslv3 via BIO pair")
    execute_process(COMMAND ${ssltest} -bio_pair -ssl3 ${extra}
                    WORKING_DIRECTORY @CMAKE_CURRENT_BINARY_DIR@
                    COMMAND_ERROR_IS_FATAL ANY
    )

    message(NOTICE "test sslv3 with server authentication via BIO pair")
    execute_process(COMMAND ${ssltest} -bio_pair -ssl3 -server_auth ${CA} ${extra}
                    WORKING_DIRECTORY @CMAKE_CURRENT_BINARY_DIR@
                    COMMAND_ERROR_IS_FATAL ANY
    )

    message(NOTICE "test sslv3 with client authentication via BIO pair")
    execute_process(COMMAND ${ssltest} -bio_pair -ssl3 -client_auth ${CA} ${extra}
                    WORKING_DIRECTORY @CMAKE_CURRENT_BINARY_DIR@
                    COMMAND_ERROR_IS_FATAL ANY
    )

    message(NOTICE "test sslv3 with both client and server authentication via BIO pair")
    execute_process(COMMAND ${ssltest} -bio_pair -ssl3 -server_auth -client_auth ${CA} ${extra}
                    WORKING_DIRECTORY @CMAKE_CURRENT_BINARY_DIR@
                    COMMAND_ERROR_IS_FATAL ANY
    )

    message(NOTICE "test sslv2/sslv3 via BIO pair")
    execute_process(COMMAND ${ssltest} ${extra}
                    WORKING_DIRECTORY @CMAKE_CURRENT_BINARY_DIR@
                    COMMAND_ERROR_IS_FATAL ANY
    )

    message(NOTICE "test dtlsv1")
    execute_process(COMMAND ${ssltest} -dtls1 ${extra}
                    WORKING_DIRECTORY @CMAKE_CURRENT_BINARY_DIR@
                    COMMAND_ERROR_IS_FATAL ANY
    )

    message(NOTICE "test dtlsv1 with server authentication")
    execute_process(COMMAND ${ssltest} -dtls1 -server_auth ${CA} ${extra}
                    WORKING_DIRECTORY @CMAKE_CURRENT_BINARY_DIR@
                    COMMAND_ERROR_IS_FATAL ANY
    )

    message(NOTICE "test dtlsv1 with client authentication")
    execute_process(COMMAND ${ssltest} -dtls1 -client_auth ${CA} ${extra}
                    WORKING_DIRECTORY @CMAKE_CURRENT_BINARY_DIR@
                    COMMAND_ERROR_IS_FATAL ANY
    )

    message(NOTICE "test dtlsv1 with both client and server authentication")
    execute_process(COMMAND ${ssltest} -dtls1 -server_auth -client_auth ${CA} ${extra}
                    WORKING_DIRECTORY @CMAKE_CURRENT_BINARY_DIR@
                    COMMAND_ERROR_IS_FATAL ANY
    )

    message(NOTICE "test dtlsv1.2")
    execute_process(COMMAND ${ssltest} -dtls12 ${extra}
                    WORKING_DIRECTORY @CMAKE_CURRENT_BINARY_DIR@
                    COMMAND_ERROR_IS_FATAL ANY
    )

    message(NOTICE "test dtlsv1.2 with server authentication")
    execute_process(COMMAND ${ssltest} -dtls12 -server_auth ${CA} ${extra}
                    WORKING_DIRECTORY @CMAKE_CURRENT_BINARY_DIR@
                    COMMAND_ERROR_IS_FATAL ANY
    )

    message(NOTICE "test dtlsv1.2 with client authentication")
    execute_process(COMMAND ${ssltest} -dtls12 -client_auth ${CA} ${extra}
                    WORKING_DIRECTORY @CMAKE_CURRENT_BINARY_DIR@
                    COMMAND_ERROR_IS_FATAL ANY
    )

    message(NOTICE "test dtlsv1.2 with both client and server authentication")
    execute_process(COMMAND ${ssltest} -dtls12 -server_auth -client_auth ${CA} ${extra}
                    WORKING_DIRECTORY @CMAKE_CURRENT_BINARY_DIR@
                    COMMAND_ERROR_IS_FATAL ANY
    )

    if (NOT dsa_cert)
        message(NOTICE "'test sslv2/sslv3 w/o (EC)DHE via BIO pair'")
        execute_process(COMMAND ${ssltest} -bio_pair -no_dhe -no_ecdhe ${extra}
                        WORKING_DIRECTORY @CMAKE_CURRENT_BINARY_DIR@
                        COMMAND_ERROR_IS_FATAL ANY
        )
    endif()

    message(NOTICE "test sslv2/sslv3 with 1024bit DHE via BIO pair")
    execute_process(COMMAND ${ssltest} -bio_pair -dhe1024dsa -v ${extra}
                    WORKING_DIRECTORY @CMAKE_CURRENT_BINARY_DIR@
                    COMMAND_ERROR_IS_FATAL ANY
    )

    message(NOTICE "test sslv2/sslv3 with server authentication")
    execute_process(COMMAND ${ssltest} -bio_pair -server_auth ${CA} ${extra}
                    WORKING_DIRECTORY @CMAKE_CURRENT_BINARY_DIR@
                    COMMAND_ERROR_IS_FATAL ANY
    )

    message(NOTICE "test sslv2/sslv3 with client authentication via BIO pair")
    execute_process(COMMAND ${ssltest} -bio_pair -client_auth ${CA} ${extra}
                    WORKING_DIRECTORY @CMAKE_CURRENT_BINARY_DIR@
                    COMMAND_ERROR_IS_FATAL ANY
    )

    message(NOTICE "test sslv2/sslv3 with both client and server authentication via BIO pair")
    execute_process(COMMAND ${ssltest} -bio_pair -server_auth -client_auth ${CA} ${extra}
                    WORKING_DIRECTORY @CMAKE_CURRENT_BINARY_DIR@
                    COMMAND_ERROR_IS_FATAL ANY
    )

    message(NOTICE "test sslv2/sslv3 with both client and server authentication via BIO pair and app verify")
    execute_process(COMMAND ${ssltest} -bio_pair -server_auth -client_auth -app_verify ${CA} ${extra}
                    WORKING_DIRECTORY @CMAKE_CURRENT_BINARY_DIR@
                    COMMAND_ERROR_IS_FATAL ANY
    )

    function(test_cipher)
        set(_cipher ${ARGV0})
        message(NOTICE "Testing ${_cipher}")
        set(prot)
        if ( ( ARGC GREATER_EQUAL 2 ) AND ( ${ARGV1} STREQUAL "SSLv3" ) )
            set(prot "-ssl3")
        endif()
        execute_process(COMMAND ${ssltest} -cipher ${_cipher} ${prot}
                        WORKING_DIRECTORY @CMAKE_CURRENT_BINARY_DIR@
                        COMMAND_ERROR_IS_FATAL ANY
        )
    endfunction()

    message(NOTICE "Testing ciphersuites")

    foreach (protocol IN ITEMS "TLSv1.2" "SSLv3")
        message(NOTICE "Testing ciphersuites for ${protocol}")
        execute_process(COMMAND @CMAKE_BINARY_DIR@/apps/openssl ciphers "RSA+${protocol}"
                        WORKING_DIRECTORY @CMAKE_CURRENT_BINARY_DIR@
                        OUTPUT_VARIABLE CIPHERS_OUTPUT
                        COMMAND_ERROR_IS_FATAL ANY
        )
        string(REGEX REPLACE ":" ";" CIPHERS_LIST ${CIPHERS_OUTPUT})
        foreach (cipher IN LISTS CIPHERS_LIST)
            test_cipher(${cipher} ${protocol})
        endforeach()

        execute_process(COMMAND @CMAKE_BINARY_DIR@/apps/openssl no-dh
                        WORKING_DIRECTORY @CMAKE_CURRENT_BINARY_DIR@
                        RESULT_VARIABLE NODHRESULT
        )
        if (NODHRESULT EQUAL 0)
            message(NOTICE "skipping RSA+DHE tests")
        else()
            execute_process(COMMAND @CMAKE_BINARY_DIR@/apps/openssl ciphers "EDH+aRSA+${protocol}:-EXP"
                            WORKING_DIRECTORY @CMAKE_CURRENT_BINARY_DIR@
                            OUTPUT_VARIABLE CIPHERS_OUTPUT2
                            COMMAND_ERROR_IS_FATAL ANY
            )
            string(REGEX REPLACE ":" ";" CIPHERS_LIST2 ${CIPHERS_OUTPUT2})
            foreach (cipher IN LISTS CIPHERS_LIST2)
                test_cipher(${cipher} ${protocol})
            endforeach()

            message(NOTICE "testing connection with weak DH, expecting failure")

            set(WEAKDHTEST YES)
            if (protocol STREQUAL "SSLv3")
                execute_process(COMMAND @CMAKE_BINARY_DIR@/apps/openssl no-ssl3
                                WORKING_DIRECTORY @CMAKE_CURRENT_BINARY_DIR@
                                RESULT_VARIABLE NOSSL3RESULT
                )
                if (NOSSL3RESULT EQUAL 0)
                    message(NOTICE "skipping weak DH test for disabled protocol")
                    set(WEAKDHTEST NO)
                endif()
            endif()
            if (WEAKDHTEST)
                if (protocol STREQUAL "SSLv3")
                    execute_process(COMMAND ${ssltest} -cipher EDH -dhe512 -ssl3
                                    WORKING_DIRECTORY @CMAKE_CURRENT_BINARY_DIR@
                                    RESULT_VARIABLE WEAKDHRESULT
                    )
                else()
                    execute_process(COMMAND ${ssltest} -cipher EDH -dhe512
                                    WORKING_DIRECTORY @CMAKE_CURRENT_BINARY_DIR@
                                    RESULT_VARIABLE WEAKDHRESULT
                    )
                endif()
                if (WEAKDHRESULT EQAUL 0)
                    message(FATAL_ERROR "FAIL: connection with weak DH succeeded")
                endif()
            endif()
        endif()
        execute_process(COMMAND @CMAKE_BINARY_DIR@/apps/openssl no-ec
                        WORKING_DIRECTORY @CMAKE_CURRENT_BINARY_DIR@
                        RESULT_VARIABLE NOECRESULT
        )
        if (NOECRESULT EQUAL 0)
            message(NOTICE "skipping RSA+ECDHE tests")
        else()
            execute_process(COMMAND @CMAKE_BINARY_DIR@/apps/openssl ciphers "EECDH+aRSA+${protocol}:-EXP"
                            WORKING_DIRECTORY @CMAKE_CURRENT_BINARY_DIR@
                            OUTPUT_VARIABLE CIPHERS_OUTPUT3
                            COMMAND_ERROR_IS_FATAL ANY
            )
            string(REGEX REPLACE ":" ";" CIPHERS_LIST3 ${CIPHERS_OUTPUT3})
            foreach (cipher IN LISTS CIPHERS_LIST3)
                test_cipher(${cipher} ${protocol})
            endforeach()
        endif()
    endforeach()

    execute_process(COMMAND @CMAKE_BINARY_DIR@/apps/openssl no-dh
                    WORKING_DIRECTORY @CMAKE_CURRENT_BINARY_DIR@
                    RESULT_VARIABLE NODHRESULT
    )
    if (NODHRESULT EQUAL 0)
        message(NOTICE "skipping RSA+DHE tests")
    else()
        message(NOTICE "test tls1 with 1024bit anonymous DH, multiple handshakes")
        execute_process(COMMAND ${ssltest} -v -bio_pair -tls1 -cipher ADH -dhe1024dsa -num 10 -f -time ${extra}
                        WORKING_DIRECTORY @CMAKE_CURRENT_BINARY_DIR@
                        COMMAND_ERROR_IS_FATAL ANY
        )
    endif()

    execute_process(COMMAND @CMAKE_BINARY_DIR@/apps/openssl no-rsa
                    WORKING_DIRECTORY @CMAKE_CURRENT_BINARY_DIR@
                    RESULT_VARIABLE NORSARESULT
    )
    if (NORSARESULT EQUAL 0)
        message(NOTICE "skipping RSA tests")
    else()
        message(NOTICE "'test tls1 with 1024bit RSA, no (EC)DHE, multiple handshakes'")
        execute_process(COMMAND @CMAKE_BINARY_DIR@/apps/ssltest -v -bio_pair -tls1 -cert ../test/server2.pem -no_dhe -no_ecdhe -num 10 -f -time ${extra}
                        WORKING_DIRECTORY @CMAKE_CURRENT_BINARY_DIR@
                        COMMAND_ERROR_IS_FATAL ANY
        )
    endif()

    execute_process(COMMAND @CMAKE_BINARY_DIR@/apps/openssl no-dh
                    WORKING_DIRECTORY @CMAKE_CURRENT_BINARY_DIR@
                    RESULT_VARIABLE NODHRESULT
    )
    if (NODHRESULT EQUAL 0)
        message(NOTICE "skipping RSA+DHE tests")
    else()
        message(NOTICE "test tls1 with 1024bit RSA, 1024bit DHE, multiple handshakes")
        execute_process(COMMAND @CMAKE_BINARY_DIR@/apps/ssltest -v -bio_pair -tls1 -cert ../apps/server2.pem -dhe1024dsa -num 10 -f -time ${extra}
                        WORKING_DIRECTORY @CMAKE_CURRENT_BINARY_DIR@
                        COMMAND_ERROR_IS_FATAL ANY
        )
    endif()


    message(NOTICE "test tls1 with PSK")
    execute_process(COMMAND ${ssltest} -tls1 -cipher PSK -psk abc123 ${extra}
                    WORKING_DIRECTORY @CMAKE_CURRENT_BINARY_DIR@
                    COMMAND_ERROR_IS_FATAL ANY
    )

    message(NOTICE "test tls1 with PSK via BIO pair")
    execute_process(COMMAND ${ssltest} -bio_pair -tls1 -cipher PSK -psk abc123 ${extra}
                    WORKING_DIRECTORY @CMAKE_CURRENT_BINARY_DIR@
                    COMMAND_ERROR_IS_FATAL ANY
    )

    message(NOTICE "test tls1 with custom extensions")
    execute_process(COMMAND ${ssltest} -bio_pair -tls1 -custom_ext
                    WORKING_DIRECTORY @CMAKE_CURRENT_BINARY_DIR@
                    COMMAND_ERROR_IS_FATAL ANY
    )

    message(NOTICE "test tls1 with serverinfo")
    execute_process(COMMAND ${ssltest} -bio_pair -tls1 -serverinfo_file ${serverinfo}
                    WORKING_DIRECTORY @CMAKE_CURRENT_BINARY_DIR@
                    COMMAND_ERROR_IS_FATAL ANY
    )
    execute_process(COMMAND ${ssltest} -bio_pair -tls1 -serverinfo_file ${serverinfo} -serverinfo_sct
                    WORKING_DIRECTORY @CMAKE_CURRENT_BINARY_DIR@
                    COMMAND_ERROR_IS_FATAL ANY
    )
    execute_process(COMMAND ${ssltest} -bio_pair -tls1 -serverinfo_file ${serverinfo} -serverinfo_tack
                    WORKING_DIRECTORY @CMAKE_CURRENT_BINARY_DIR@
                    COMMAND_ERROR_IS_FATAL ANY
    )
    execute_process(COMMAND ${ssltest} -bio_pair -tls1 -serverinfo_file ${serverinfo} -serverinfo_sct -serverinfo_tack
                    WORKING_DIRECTORY @CMAKE_CURRENT_BINARY_DIR@
                    COMMAND_ERROR_IS_FATAL ANY
    )
    execute_process(COMMAND ${ssltest} -bio_pair -tls1 -custom_ext -serverinfo_file ${serverinfo} -serverinfo_sct -serverinfo_tack
                    WORKING_DIRECTORY @CMAKE_CURRENT_BINARY_DIR@
                    COMMAND_ERROR_IS_FATAL ANY
    )

    execute_process(COMMAND ${ssltest} -bio_pair -sn_client foo
                    WORKING_DIRECTORY @CMAKE_CURRENT_BINARY_DIR@
                    COMMAND_ERROR_IS_FATAL ANY
    )
    execute_process(COMMAND ${ssltest} -bio_pair -sn_server1 foo
                    WORKING_DIRECTORY @CMAKE_CURRENT_BINARY_DIR@
                    COMMAND_ERROR_IS_FATAL ANY
    )
    execute_process(COMMAND ${ssltest} -bio_pair -sn_client foo -sn_server1 foo -sn_expect1
                    WORKING_DIRECTORY @CMAKE_CURRENT_BINARY_DIR@
                    COMMAND_ERROR_IS_FATAL ANY
    )
    execute_process(COMMAND ${ssltest} -bio_pair -sn_client foo -sn_server1 bar -sn_expect1
                    WORKING_DIRECTORY @CMAKE_CURRENT_BINARY_DIR@
                    COMMAND_ERROR_IS_FATAL ANY
    )
    execute_process(COMMAND ${ssltest} -bio_pair -sn_client foo -sn_server1 foo -sn_server2 bar -sn_expect1
                    WORKING_DIRECTORY @CMAKE_CURRENT_BINARY_DIR@
                    COMMAND_ERROR_IS_FATAL ANY
    )
    execute_process(COMMAND ${ssltest} -bio_pair -sn_client bar -sn_server1 foo -sn_server2 bar -sn_expect2
                    WORKING_DIRECTORY @CMAKE_CURRENT_BINARY_DIR@
                    COMMAND_ERROR_IS_FATAL ANY
    )
    # Negative test - make sure it doesn't crash, and doesn't switch contexts
    execute_process(COMMAND ${ssltest} -bio_pair -sn_client foobar -sn_server1 foo -sn_server2 bar -sn_expect1
                    WORKING_DIRECTORY @CMAKE_CURRENT_BINARY_DIR@
                    COMMAND_ERROR_IS_FATAL ANY
    )

    execute_process(COMMAND ${ssltest} -bio_pair -tls1 -alpn_client foo -alpn_server bar
                    WORKING_DIRECTORY @CMAKE_CURRENT_BINARY_DIR@
                    COMMAND_ERROR_IS_FATAL ANY
    )
    execute_process(COMMAND ${ssltest} -bio_pair -tls1 -alpn_client foo -alpn_server foo -alpn_expected foo
                    WORKING_DIRECTORY @CMAKE_CURRENT_BINARY_DIR@
                    COMMAND_ERROR_IS_FATAL ANY
    )
    execute_process(COMMAND ${ssltest} -bio_pair -tls1 -alpn_client foo,bar -alpn_server foo -alpn_expected foo
                    WORKING_DIRECTORY @CMAKE_CURRENT_BINARY_DIR@
                    COMMAND_ERROR_IS_FATAL ANY
    )
    execute_process(COMMAND ${ssltest} -bio_pair -tls1 -alpn_client bar,foo -alpn_server foo -alpn_expected foo
                    WORKING_DIRECTORY @CMAKE_CURRENT_BINARY_DIR@
                    COMMAND_ERROR_IS_FATAL ANY
    )
    execute_process(COMMAND ${ssltest} -bio_pair -tls1 -alpn_client bar,foo -alpn_server foo,bar -alpn_expected foo
                    WORKING_DIRECTORY @CMAKE_CURRENT_BINARY_DIR@
                    COMMAND_ERROR_IS_FATAL ANY
    )
    execute_process(COMMAND ${ssltest} -bio_pair -tls1 -alpn_client bar,foo -alpn_server bar,foo -alpn_expected bar
                    WORKING_DIRECTORY @CMAKE_CURRENT_BINARY_DIR@
                    COMMAND_ERROR_IS_FATAL ANY
    )
    execute_process(COMMAND ${ssltest} -bio_pair -tls1 -alpn_client foo,bar -alpn_server bar,foo -alpn_expected bar
                    WORKING_DIRECTORY @CMAKE_CURRENT_BINARY_DIR@
                    COMMAND_ERROR_IS_FATAL ANY
    )
    execute_process(COMMAND ${ssltest} -bio_pair -tls1 -alpn_client baz -alpn_server bar,foo
                    WORKING_DIRECTORY @CMAKE_CURRENT_BINARY_DIR@
                    COMMAND_ERROR_IS_FATAL ANY
    )

    execute_process(COMMAND ${ssltest} -bio_pair -alpn_client foo,bar -sn_client alice -alpn_server1 foo,123 -sn_server1 alice -alpn_server2 bar,456 -sn_server2 bob -alpn_expected foo
                    WORKING_DIRECTORY @CMAKE_CURRENT_BINARY_DIR@
                    COMMAND_ERROR_IS_FATAL ANY
    )
    execute_process(COMMAND ${ssltest} -bio_pair -alpn_client foo,bar -sn_client bob -alpn_server1 foo,123 -sn_server1 alice -alpn_server2 bar,456 -sn_server2 bob -alpn_expected bar
                    WORKING_DIRECTORY @CMAKE_CURRENT_BINARY_DIR@
                    COMMAND_ERROR_IS_FATAL ANY
    )
    execute_process(COMMAND ${ssltest} -bio_pair -alpn_client foo,bar -sn_client bob -sn_server1 alice -alpn_server2 bar,456 -sn_server2 bob -alpn_expected bar
                    WORKING_DIRECTORY @CMAKE_CURRENT_BINARY_DIR@
                    COMMAND_ERROR_IS_FATAL ANY
    )

    execute_process(COMMAND @CMAKE_BINARY_DIR@/apps/openssl no-srp
                    WORKING_DIRECTORY @CMAKE_CURRENT_BINARY_DIR@
                    RESULT_VARIABLE NOSRPRESULT
    )
    if (NOSRPRESULT EQUAL 0)
        message(NOTICE "skipping SRP tests")
    else()
        message(NOTICE "test tls1 with SRP")
        execute_process(COMMAND ${ssltest} -tls1 -cipher SRP -srpuser test -srppass abc123
                        WORKING_DIRECTORY @CMAKE_CURRENT_BINARY_DIR@
                        COMMAND_ERROR_IS_FATAL ANY
        )

        message(NOTICE "test tls1 with SRP via BIO pair")
        execute_process(COMMAND ${ssltest} -bio_pair -tls1 -cipher SRP -srpuser test -srppass abc123
                        WORKING_DIRECTORY @CMAKE_CURRENT_BINARY_DIR@
                        COMMAND_ERROR_IS_FATAL ANY
        )

        message(NOTICE "test tls1 with SRP auth")
        execute_process(COMMAND ${ssltest} -tls1 -cipher aSRP -srpuser test -srppass abc123
                        WORKING_DIRECTORY @CMAKE_CURRENT_BINARY_DIR@
                        COMMAND_ERROR_IS_FATAL ANY
        )

        message(NOTICE "test tls1 with SRP auth via BIO pair")
        execute_process(COMMAND ${ssltest} -bio_pair -tls1 -cipher aSRP -srpuser test -srppass abc123
                        WORKING_DIRECTORY @CMAKE_CURRENT_BINARY_DIR@
                        COMMAND_ERROR_IS_FATAL ANY
        )
    endif()

    string(LENGTH ${extra} EXTRALENGTH)
    if ( ( EXTRALENGTH EQUAL 0 ) AND ( "@OPENSSL_TARGET_ARCH@ STREQUAL" "x64" ) )
        execute_process(COMMAND ${ssltest} -cipher AES128-SHA -bytes 8m
                        WORKING_DIRECTORY @CMAKE_CURRENT_BINARY_DIR@
                        COMMAND_ERROR_IS_FATAL ANY
        )
        execute_process(COMMAND ${ssltest} -cipher AES128-SHA256 -bytes 8m
                        WORKING_DIRECTORY @CMAKE_CURRENT_BINARY_DIR@
                        COMMAND_ERROR_IS_FATAL ANY
        )
    endif()

    execute_process(COMMAND ${ssltest} -tls12 -sn_client server1 -sn_server1 server1 -sn_server2 server2 -sn_expect1 -client_sigalgs RSA+SHA256 -server_digest_expect SHA256
                    WORKING_DIRECTORY @CMAKE_CURRENT_BINARY_DIR@
                    COMMAND_ERROR_IS_FATAL ANY
    )
    execute_process(COMMAND ${ssltest} -tls12 -sn_client server1 -sn_server1 server1 -sn_server2 server2 -sn_expect1 -client_sigalgs RSA+SHA256 -server_digest_expect SHA256 -sni_in_cert_cb
                    WORKING_DIRECTORY @CMAKE_CURRENT_BINARY_DIR@
                    COMMAND_ERROR_IS_FATAL ANY
    )
    # Switching SSL_CTX on SNI must not break signature algorithm negotiation.
    execute_process(COMMAND ${ssltest} -tls12 -sn_client server2 -sn_server1 server1 -sn_server2 server2 -sn_expect2 -client_sigalgs RSA+SHA256 -server_digest_expect SHA256
                    WORKING_DIRECTORY @CMAKE_CURRENT_BINARY_DIR@
                    COMMAND_ERROR_IS_FATAL ANY
    )
    execute_process(COMMAND ${ssltest} -tls12 -sn_client server2 -sn_server1 server1 -sn_server2 server2 -sn_expect2 -client_sigalgs RSA+SHA256 -server_digest_expect SHA256 -sni_in_cert_cb
                    WORKING_DIRECTORY @CMAKE_CURRENT_BINARY_DIR@
                    COMMAND_ERROR_IS_FATAL ANY
    )

    execute_process(COMMAND ${ssltest} -bio_pair -sn_client alice -sn_server1 alice -sn_server2 bob -s_ticket1 no -s_ticket2 no -c_ticket no -ticket_expect no
                    WORKING_DIRECTORY @CMAKE_CURRENT_BINARY_DIR@
                    COMMAND_ERROR_IS_FATAL ANY
    )
    execute_process(COMMAND ${ssltest} -bio_pair -sn_client alice -sn_server1 alice -sn_server2 bob -s_ticket1 no -s_ticket2 no -c_ticket yes -ticket_expect no
                    WORKING_DIRECTORY @CMAKE_CURRENT_BINARY_DIR@
                    COMMAND_ERROR_IS_FATAL ANY
    )
    execute_process(COMMAND ${ssltest} -bio_pair -sn_client alice -sn_server1 alice -sn_server2 bob -s_ticket1 no -s_ticket2 yes -c_ticket no -ticket_expect no
                    WORKING_DIRECTORY @CMAKE_CURRENT_BINARY_DIR@
                    COMMAND_ERROR_IS_FATAL ANY
    )
    execute_process(COMMAND ${ssltest} -bio_pair -sn_client alice -sn_server1 alice -sn_server2 bob -s_ticket1 no -s_ticket2 yes -c_ticket yes -ticket_expect no
                    WORKING_DIRECTORY @CMAKE_CURRENT_BINARY_DIR@
                    COMMAND_ERROR_IS_FATAL ANY
    )
    execute_process(COMMAND ${ssltest} -bio_pair -sn_client alice -sn_server1 alice -sn_server2 bob -s_ticket1 yes -s_ticket2 no -c_ticket no -ticket_expect no
                    WORKING_DIRECTORY @CMAKE_CURRENT_BINARY_DIR@
                    COMMAND_ERROR_IS_FATAL ANY
    )
    execute_process(COMMAND ${ssltest} -bio_pair -sn_client alice -sn_server1 alice -sn_server2 bob -s_ticket1 yes -s_ticket2 no -c_ticket yes -ticket_expect yes
                    WORKING_DIRECTORY @CMAKE_CURRENT_BINARY_DIR@
                    COMMAND_ERROR_IS_FATAL ANY
    )
    execute_process(COMMAND ${ssltest} -bio_pair -sn_client alice -sn_server1 alice -sn_server2 bob -s_ticket1 yes -s_ticket2 yes -c_ticket no -ticket_expect no
                    WORKING_DIRECTORY @CMAKE_CURRENT_BINARY_DIR@
                    COMMAND_ERROR_IS_FATAL ANY
    )
    execute_process(COMMAND ${ssltest} -bio_pair -sn_client alice -sn_server1 alice -sn_server2 bob -s_ticket1 yes -s_ticket2 yes -c_ticket yes -ticket_expect yes
                    WORKING_DIRECTORY @CMAKE_CURRENT_BINARY_DIR@
                    COMMAND_ERROR_IS_FATAL ANY
    )

    execute_process(COMMAND ${ssltest} -bio_pair -sn_client bob -sn_server1 alice -sn_server2 bob -s_ticket1 no -s_ticket2 no -c_ticket no -ticket_expect no
                    WORKING_DIRECTORY @CMAKE_CURRENT_BINARY_DIR@
                    COMMAND_ERROR_IS_FATAL ANY
    )
    execute_process(COMMAND ${ssltest} -bio_pair -sn_client bob -sn_server1 alice -sn_server2 bob -s_ticket1 no -s_ticket2 no -c_ticket yes -ticket_expect no
                    WORKING_DIRECTORY @CMAKE_CURRENT_BINARY_DIR@
                    COMMAND_ERROR_IS_FATAL ANY
    )
    execute_process(COMMAND ${ssltest} -bio_pair -sn_client bob -sn_server1 alice -sn_server2 bob -s_ticket1 no -s_ticket2 yes -c_ticket no -ticket_expect no
                    WORKING_DIRECTORY @CMAKE_CURRENT_BINARY_DIR@
                    COMMAND_ERROR_IS_FATAL ANY
    )
    execute_process(COMMAND ${ssltest} -bio_pair -sn_client bob -sn_server1 alice -sn_server2 bob -s_ticket1 no -s_ticket2 yes -c_ticket yes -ticket_expect no
                    WORKING_DIRECTORY @CMAKE_CURRENT_BINARY_DIR@
                    COMMAND_ERROR_IS_FATAL ANY
    )
    execute_process(COMMAND ${ssltest} -bio_pair -sn_client bob -sn_server1 alice -sn_server2 bob -s_ticket1 yes -s_ticket2 no -c_ticket no -ticket_expect no
                    WORKING_DIRECTORY @CMAKE_CURRENT_BINARY_DIR@
                    COMMAND_ERROR_IS_FATAL ANY
    )
    execute_process(COMMAND ${ssltest} -bio_pair -sn_client bob -sn_server1 alice -sn_server2 bob -s_ticket1 yes -s_ticket2 no -c_ticket yes -ticket_expect no
                    WORKING_DIRECTORY @CMAKE_CURRENT_BINARY_DIR@
                    COMMAND_ERROR_IS_FATAL ANY
    )
    execute_process(COMMAND ${ssltest} -bio_pair -sn_client bob -sn_server1 alice -sn_server2 bob -s_ticket1 yes -s_ticket2 yes -c_ticket no -ticket_expect no
                    WORKING_DIRECTORY @CMAKE_CURRENT_BINARY_DIR@
                    COMMAND_ERROR_IS_FATAL ANY
    )
    execute_process(COMMAND ${ssltest} -bio_pair -sn_client bob -sn_server1 alice -sn_server2 bob -s_ticket1 yes -s_ticket2 yes -c_ticket yes -ticket_expect yes
                    WORKING_DIRECTORY @CMAKE_CURRENT_BINARY_DIR@
                    COMMAND_ERROR_IS_FATAL ANY
    )

    execute_process(COMMAND ${ssltest} -bio_pair -s_ticket1 broken -c_ticket yes -ticket_expect no
                    WORKING_DIRECTORY @CMAKE_CURRENT_BINARY_DIR@
                    COMMAND_ERROR_IS_FATAL ANY
    )
endfunction()

function(testsslproxy)
    message(NOTICE "'Testing a lot of proxy conditions.'")
    message(NOTICE "'Some of them may turn out being invalid, which is fine.'")

    foreach (auth IN ITEMS A B C BC)
        foreach (cond IN ITEMS A B C "A|B&!C")
            testssl(${ARGV0} ${ARGV1} ${ARGV2} "-proxy -proxy_auth ${auth} -proxy_cond ${cond}")
            # if [ $? = 3 ]; then exit 1; fi # no exit 3 in testssl script
        endforeach()
    endforeach()
endfunction()

execute_process(COMMAND "@CMAKE_BINARY_DIR@/apps/ssltest" -test_cipherlist
                WORKING_DIRECTORY @CMAKE_CURRENT_BINARY_DIR@
                COMMAND_ERROR_IS_FATAL ANY
)

testssl(keyU.ss certU.ss certCA.ss)
testssl(keyU.ss certU.ss certCA.ss -rle)
testsslproxy(keyP1.ss certP1.ss intP1.ss)
testsslproxy(keyP2.ss certP2.ss intP2.ss)
