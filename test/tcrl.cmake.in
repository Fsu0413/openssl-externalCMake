# SPDX-License-Identifier: Unlicense

message(NOTICE "testing crl conversions")

execute_process(COMMAND @CMAKE_COMMAND@ -E copy @CMAKE_SOURCE_DIR@/openssl/test/testcrl.pem @CMAKE_CURRENT_BINARY_DIR@/crl-fff.p
                WORKING_DIRECTORY @CMAKE_CURRENT_BINARY_DIR@
                COMMAND_ERROR_IS_FATAL ANY
)

# why doesn't original tcrl script use loop?

message(NOTICE "p -> d")
execute_process(COMMAND @CMAKE_BINARY_DIR@/apps/openssl crl -in crl-fff.p -inform p -outform d
                WORKING_DIRECTORY @CMAKE_CURRENT_BINARY_DIR@
                OUTPUT_FILE crl-f.d
                COMMAND_ERROR_IS_FATAL ANY
)

# p -> t

message(NOTICE "p -> p")
execute_process(COMMAND @CMAKE_BINARY_DIR@/apps/openssl crl -in crl-fff.p -inform p -outform p
                WORKING_DIRECTORY @CMAKE_CURRENT_BINARY_DIR@
                OUTPUT_FILE crl-f.p
                COMMAND_ERROR_IS_FATAL ANY
)

message(NOTICE "d -> d")
execute_process(COMMAND @CMAKE_BINARY_DIR@/apps/openssl crl -in crl-f.d -inform d -outform d
                WORKING_DIRECTORY @CMAKE_CURRENT_BINARY_DIR@
                OUTPUT_FILE crl-ff.d1
                COMMAND_ERROR_IS_FATAL ANY
)

# t -> d

message(NOTICE "p -> d")
execute_process(COMMAND @CMAKE_BINARY_DIR@/apps/openssl crl -in crl-f.p -inform p -outform d
                WORKING_DIRECTORY @CMAKE_CURRENT_BINARY_DIR@
                OUTPUT_FILE crl-ff.d3
                COMMAND_ERROR_IS_FATAL ANY
)

# d -> t

# t -> t

# p -> t

message(NOTICE "d -> p")
execute_process(COMMAND @CMAKE_BINARY_DIR@/apps/openssl crl -in crl-f.d -inform d -outform p
                WORKING_DIRECTORY @CMAKE_CURRENT_BINARY_DIR@
                OUTPUT_FILE crl-ff.p1
                COMMAND_ERROR_IS_FATAL ANY
)

# t -> p

message(NOTICE "p -> p")
execute_process(COMMAND @CMAKE_BINARY_DIR@/apps/openssl crl -in crl-f.p -inform p -outform p
                WORKING_DIRECTORY @CMAKE_CURRENT_BINARY_DIR@
                OUTPUT_FILE crl-ff.p3
                COMMAND_ERROR_IS_FATAL ANY
)

execute_process(COMMAND @CMAKE_COMMAND@ -E compare_files --ignore-eol crl-fff.p crl-f.p
                WORKING_DIRECTORY @CMAKE_CURRENT_BINARY_DIR@
                COMMAND_ERROR_IS_FATAL ANY
)

execute_process(COMMAND @CMAKE_COMMAND@ -E compare_files --ignore-eol crl-fff.p crl-ff.p1
                WORKING_DIRECTORY @CMAKE_CURRENT_BINARY_DIR@
                COMMAND_ERROR_IS_FATAL ANY
)

# crl-fff.p crl-ff.p2

execute_process(COMMAND @CMAKE_COMMAND@ -E compare_files --ignore-eol crl-fff.p crl-ff.p3
                WORKING_DIRECTORY @CMAKE_CURRENT_BINARY_DIR@
                COMMAND_ERROR_IS_FATAL ANY
)

# crl-f.t crl-ff.t1

# crl-f.t crl-ff.t2

# crl-f.t crl-ff.t3

# This is indeed the original logic of tcrl logic. I don't know why they don't compare crl-f.d. Maybe that's just oversight.

execute_process(COMMAND @CMAKE_COMMAND@ -E compare_files --ignore-eol crl-f.p crl-ff.p1
                WORKING_DIRECTORY @CMAKE_CURRENT_BINARY_DIR@
                COMMAND_ERROR_IS_FATAL ANY
)

# crl-f.p crl-ff.p2

execute_process(COMMAND @CMAKE_COMMAND@ -E compare_files --ignore-eol crl-f.p crl-ff.p3
                WORKING_DIRECTORY @CMAKE_CURRENT_BINARY_DIR@
                COMMAND_ERROR_IS_FATAL ANY
)

# ... I think following are correct, isn't it? -- Fsu0413

execute_process(COMMAND @CMAKE_COMMAND@ -E compare_files --ignore-eol crl-f.d crl-ff.d1
             WORKING_DIRECTORY @CMAKE_CURRENT_BINARY_DIR@
             COMMAND_ERROR_IS_FATAL ANY
)

# crl-f.d crl-ff.d2

execute_process(COMMAND @CMAKE_COMMAND@ -E compare_files --ignore-eol crl-f.d crl-ff.d3
             WORKING_DIRECTORY @CMAKE_CURRENT_BINARY_DIR@
             COMMAND_ERROR_IS_FATAL ANY
)

execute_process(COMMAND @CMAKE_COMMAND@ -E rm -f crl-fff.p crl-f.d crl-f.p crl-ff.p1 crl-ff.p3 crl-ff.d1 crl-ff.d3
                WORKING_DIRECTORY @CMAKE_CURRENT_BINARY_DIR@
)
