
foreach (TESTFILE IN ITEMS testreq.pem testreq2.pem)
    if ( NOT TESTFILE STREQUAL "testreq.pem" ) # generated by testgen.cmake.in
        execute_process(COMMAND @CMAKE_COMMAND@ -E copy @CMAKE_SOURCE_DIR@/openssl/test/${TESTFILE} @CMAKE_CURRENT_BINARY_DIR@/req-fff.p
                        WORKING_DIRECTORY @CMAKE_CURRENT_BINARY_DIR@
                        COMMAND_ERROR_IS_FATAL ANY
        )
    else()
        execute_process(COMMAND @CMAKE_COMMAND@ -E copy @CMAKE_CURRENT_BINARY_DIR@/${TESTFILE} @CMAKE_CURRENT_BINARY_DIR@/req-fff.p
                        WORKING_DIRECTORY @CMAKE_CURRENT_BINARY_DIR@
                        COMMAND_ERROR_IS_FATAL ANY
        )
    endif()

    execute_process(COMMAND @CMAKE_BINARY_DIR@/apps/openssl req -config ../apps/openssl.cnf -in req-fff.p -inform p -noout -text
                    WORKING_DIRECTORY @CMAKE_CURRENT_BINARY_DIR@
                    OUTPUT_VARIABLE REQCONFIG
                    ERROR_VARIABLE REQCONFIG
    )

    string(TOLOWER ${REQCONFIG} REQCONFIG_LOWER)

    if (REQCONFIG_LOWER MATCHES "unknown public key")
        message(NOTICE "skipping req conversion test for ${TESTFILE}")
    else()
        message(NOTICE "testing req conversions")

        # why doesn't original treq script use loop?

        message(NOTICE "p -> d")
        execute_process(COMMAND @CMAKE_BINARY_DIR@/apps/openssl req -config ../apps/openssl.cnf -in req-fff.p -inform p -outform d
                        WORKING_DIRECTORY @CMAKE_CURRENT_BINARY_DIR@
                        OUTPUT_FILE req-f.d
                        COMMAND_ERROR_IS_FATAL ANY
        )

        # p -> t

        message(NOTICE "p -> p")
        execute_process(COMMAND @CMAKE_BINARY_DIR@/apps/openssl req -config ../apps/openssl.cnf -in req-fff.p -inform p -outform p
                        WORKING_DIRECTORY @CMAKE_CURRENT_BINARY_DIR@
                        OUTPUT_FILE req-f.p
                        COMMAND_ERROR_IS_FATAL ANY
        )

        message(NOTICE "d -> d")
        execute_process(COMMAND @CMAKE_BINARY_DIR@/apps/openssl req -config ../apps/openssl.cnf -in req-f.d -inform d -outform d
                        WORKING_DIRECTORY @CMAKE_CURRENT_BINARY_DIR@
                        OUTPUT_FILE req-ff.d1
                        COMMAND_ERROR_IS_FATAL ANY
        )

        # t -> d

        message(NOTICE "p -> d")
        execute_process(COMMAND @CMAKE_BINARY_DIR@/apps/openssl req -config ../apps/openssl.cnf -in req-f.p -inform p -outform d
                        WORKING_DIRECTORY @CMAKE_CURRENT_BINARY_DIR@
                        OUTPUT_FILE req-ff.d3
                        COMMAND_ERROR_IS_FATAL ANY
        )

        # d -> t

        # t -> t

        # p -> t

        message(NOTICE "d -> p")
        execute_process(COMMAND @CMAKE_BINARY_DIR@/apps/openssl req -config ../apps/openssl.cnf -in req-f.d -inform d -outform p
                        WORKING_DIRECTORY @CMAKE_CURRENT_BINARY_DIR@
                        OUTPUT_FILE req-ff.p1
                        COMMAND_ERROR_IS_FATAL ANY
        )

        # t -> p

        message(NOTICE "p -> p")
        execute_process(COMMAND @CMAKE_BINARY_DIR@/apps/openssl req -config ../apps/openssl.cnf -in req-f.p -inform p -outform p
                        WORKING_DIRECTORY @CMAKE_CURRENT_BINARY_DIR@
                        OUTPUT_FILE req-ff.p3
                        COMMAND_ERROR_IS_FATAL ANY
        )

        execute_process(COMMAND @CMAKE_COMMAND@ -E compare_files --ignore-eol req-fff.p req-f.p
                        WORKING_DIRECTORY @CMAKE_CURRENT_BINARY_DIR@
                        COMMAND_ERROR_IS_FATAL ANY
        )

        execute_process(COMMAND @CMAKE_COMMAND@ -E compare_files --ignore-eol req-fff.p req-ff.p1
                        WORKING_DIRECTORY @CMAKE_CURRENT_BINARY_DIR@
                        COMMAND_ERROR_IS_FATAL ANY
        )

        # req-fff.p req-ff.p2

        execute_process(COMMAND @CMAKE_COMMAND@ -E compare_files --ignore-eol req-fff.p req-ff.p3
                        WORKING_DIRECTORY @CMAKE_CURRENT_BINARY_DIR@
                        COMMAND_ERROR_IS_FATAL ANY
        )

        # req-f.t req-ff.t1

        # req-f.t req-ff.t2

        # req-f.t req-ff.t3

        # This is indeed the original logic of treq logic. I don't know why they don't compare req-f.d. Maybe that's just oversight.

        execute_process(COMMAND @CMAKE_COMMAND@ -E compare_files --ignore-eol req-f.p req-ff.p1
                        WORKING_DIRECTORY @CMAKE_CURRENT_BINARY_DIR@
                        COMMAND_ERROR_IS_FATAL ANY
        )

        # req-f.p req-ff.p2

        execute_process(COMMAND @CMAKE_COMMAND@ -E compare_files --ignore-eol req-f.p req-ff.p3
                        WORKING_DIRECTORY @CMAKE_CURRENT_BINARY_DIR@
                        COMMAND_ERROR_IS_FATAL ANY
        )

        # ... I think following are correct, isn't it? -- Fsu0413

        execute_process(COMMAND @CMAKE_COMMAND@ -E compare_files --ignore-eol req-f.d req-ff.d1
                     WORKING_DIRECTORY @CMAKE_CURRENT_BINARY_DIR@
                     COMMAND_ERROR_IS_FATAL ANY
        )

        # req-f.d req-ff.d2

        execute_process(COMMAND @CMAKE_COMMAND@ -E compare_files --ignore-eol req-f.d req-ff.d3
                     WORKING_DIRECTORY @CMAKE_CURRENT_BINARY_DIR@
                     COMMAND_ERROR_IS_FATAL ANY
        )
    endif()

    execute_process(COMMAND @CMAKE_COMMAND@ -E rm -f req-fff.p req-f.d req-f.p req-ff.p1 req-ff.p3 req-ff.d1 req-ff.d3
                    WORKING_DIRECTORY @CMAKE_CURRENT_BINARY_DIR@
    )
endforeach()
